{"ast":null,"code":"var _jsxFileName = \"/home/satishp/Desktop/work/react-crud/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport List from \"./components/List\";\nimport Addperson from \"./components/Addperson\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'; // const apiUrl = 'http://localhost:3000/api/person'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [persons, setPersons] = useState([]);\n  useEffect(() => {\n    axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {\n      const persons = res.data;\n      setPersons(persons);\n    });\n  }, []);\n\n  const deletePerson = id => {\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`).then(res => {\n      const personsClone = [...persons];\n      const newPersonList = personsClone.filter(person => {\n        return person.id !== id;\n      });\n      setPersons(newPersonList);\n    }).catch(err => alert('Unable to remove todo'));\n  };\n\n  const addPerson = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Addperson, {\n      addUser: addPerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      users: persons,\n      deleteUser: deletePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"3dL94kAggHNyJLHmh8hlLChOUrQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/satishp/Desktop/work/react-crud/src/App.js"],"names":["React","useState","useEffect","axios","List","Addperson","App","persons","setPersons","get","then","res","data","deletePerson","id","delete","personsClone","newPersonList","filter","person","catch","err","alert","addPerson","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,sCAAP;AACA,OAAO,WAAP,C,CAEA;;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACM,GAAN,CAAW,4CAAX,EACGC,IADH,CACQC,GAAG,IAAI;AACX,YAAMJ,OAAO,GAAGI,GAAG,CAACC,IAApB;AACAJ,MAAAA,UAAU,CAACD,OAAD,CAAV;AACD,KAJH;AAKD,GANQ,EAMP,EANO,CAAT;;AAQA,QAAMM,YAAY,GAAIC,EAAD,IAAQ;AAC3BX,IAAAA,KAAK,CAACY,MAAN,CAAc,8CAA6CD,EAAG,EAA9D,EACGJ,IADH,CACQC,GAAG,IAAI;AACX,YAAMK,YAAY,GAAG,CAAC,GAAGT,OAAJ,CAArB;AACA,YAAMU,aAAa,GAAGD,YAAY,CAACE,MAAb,CAAoBC,MAAM,IAAI;AAClD,eAAOA,MAAM,CAACL,EAAP,KAAcA,EAArB;AACD,OAFqB,CAAtB;AAGAN,MAAAA,UAAU,CAACS,aAAD,CAAV;AACD,KAPH,EAOKG,KAPL,CAOWC,GAAG,IAAIC,KAAK,CAAC,uBAAD,CAPvB;AAQD,GATD;;AAWA,QAAMC,SAAS,GAAIC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,cAAF;AAED,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAEhB,OAAb;AAAsB,MAAA,UAAU,EAAEM;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAjCQP,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport List from \"./components/List\";\nimport Addperson from \"./components/Addperson\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// const apiUrl = 'http://localhost:3000/api/person'\n\nfunction App() {\n  const [persons, setPersons] = useState([])\n\n  useEffect(() => {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const persons = res.data;\n        setPersons(persons);\n      })\n  },[])\n\n  const deletePerson = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n      .then(res => {\n        const personsClone = [...persons]\n        const newPersonList = personsClone.filter(person => {\n          return person.id !== id\n        })\n        setPersons(newPersonList);\n      }).catch(err => alert('Unable to remove todo'))\n  }\n\n  const addPerson = (e) => {\n    e.preventDefault()\n    \n  }\n\n  return (\n    <>\n      <Addperson addUser={addPerson}/>\n      <List users={persons} deleteUser={deletePerson}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}